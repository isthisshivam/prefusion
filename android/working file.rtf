{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red9\green9\blue9;\red17\green109\blue18;\red121\green121\blue121;
\red0\green29\blue164;\red18\green51\blue230;\red114\green0\blue130;}
{\*\expandedcolortbl;;\csgenericrgb\c3529\c3529\c3529;\csgenericrgb\c6667\c42745\c7059;\csgenericrgb\c47451\c47451\c47451;
\csgenericrgb\c0\c11373\c64314;\csgenericrgb\c7059\c20000\c90196;\csgenericrgb\c44706\c0\c50980;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //Build.app\
//Inside build folder \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf2 apply \cf3 plugin\cf2 : \cf3 "com.android.application"\
\cf2 apply \cf3 plugin\cf2 : \cf3 'com.google.gms.google-services' 
\f2\i \cf4 // <- Add this line\

\f1\i0 \cf2 apply \cf3 plugin\cf2 : \cf3 'com.google.firebase.crashlytics'\
\cf5 import \cf2 com.android.build.\cf0 OutputFile\
\

\f2\i \cf4 /**\
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets\
 * and bundleReleaseJsAndAssets).\
 * These basically call `react-native bundle` with the correct arguments during the Android build\
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the\
 * bundle directly from the development server. Below you can see all the possible configurations\
 * and their defaults. If you decide to add a configuration block, make sure to add it before the\
 * `apply from: "../../node_modules/react-native/react.gradle"` line.\
 *\
 * project.ext.react = [\
 *   // the name of the generated asset file containing your JS bundle\
 *   bundleAssetName: "index.android.bundle",\
 *\
 *   // the entry file for bundle generation. If none specified and\
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is\
 *   // default. Can be overridden with ENTRY_FILE environment variable.\
 *   entryFile: "index.android.js",\
 *\
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format\
 *   bundleCommand: "ram-bundle",\
 *\
 *   // whether to bundle JS and assets in debug mode\
 *   bundleInDebug: false,\
 *\
 *   // whether to bundle JS and assets in release mode\
 *   bundleInRelease: true,\
 *\
 *   // whether to bundle JS and assets in another build variant (if configured).\
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants\
 *   // The configuration property can be in the following formats\
 *   //         'bundleIn$\{productFlavor\}$\{buildType\}'\
 *   //         'bundleIn$\{buildType\}'\
 *   // bundleInFreeDebug: true,\
 *   // bundleInPaidRelease: true,\
 *   // bundleInBeta: true,\
 *\
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)\
 *   // for example: to disable dev mode in the staging build type (if configured)\
 *   devDisabledInStaging: true,\
 *   // The configuration property can be in the following formats\
 *   //         'devDisabledIn$\{productFlavor\}$\{buildType\}'\
 *   //         'devDisabledIn$\{buildType\}'\
 *\
 *   // the root of your project, i.e. where "package.json" lives\
 *   root: "../../",\
 *\
 *   // where to put the JS bundle asset in debug mode\
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",\
 *\
 *   // where to put the JS bundle asset in release mode\
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",\
 *\
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via\
 *   // require('./image.png')), in debug mode\
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",\
 *\
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via\
 *   // require('./image.png')), in release mode\
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",\
 *\
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means\
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to\
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle\
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/\
 *   // for example, you might want to remove it from here.\
 *   inputExcludes: ["android/**", "ios/**"],\
 *\
 *   // override which node gets called and with what additional arguments\
 *   nodeExecutableAndArgs: ["node"],\
 *\
 *   // supply additional arguments to the packager\
 *   extraPackagerArgs: []\
 * ]\
 */\
\

\f1\i0 \cf2 project.ext.react = [\
    \cf3 enableHermes\cf2 : \cf5 false\cf2 ,  
\f2\i \cf4 // clean and rebuild if changing\

\f1\i0 \cf2 ]\
\
apply \cf3 from\cf2 : \cf3 "../../node_modules/react-native/react.gradle"\
\

\f2\i \cf4 /**\
 * Set this to true to create two separate APKs instead of one:\
 *   - An APK that only works on ARM devices\
 *   - An APK that only works on x86 devices\
 * The advantage is the size of the APK is reduced by about 4MB.\
 * Upload all the APKs to the Play Store and people will download\
 * the correct one based on the CPU architecture of their device.\
 */\

\f1\i0 \cf5 def \cf0 enableSeparateBuildPerCPUArchitecture \cf2 = \cf5 false\
\

\f2\i \cf4 /**\
 * Run Proguard to shrink the Java bytecode in release builds.\
 */\

\f1\i0 \cf5 def \cf0 enableProguardInReleaseBuilds \cf2 = \cf5 false\
\

\f2\i \cf4 /**\
 * The preferred build flavor of JavaScriptCore.\
 *\
 * For example, to use the international variant, you can use:\
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`\
 *\
 * The international variant includes ICU i18n library and necessary data\
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that\
 * give correct results when using with locales other than en-US.  Note that\
 * this variant is about 6MiB larger per architecture than default.\
 */\

\f1\i0 \cf5 def \cf0 jscFlavor \cf2 = \cf3 'org.webkit:android-jsc:+'\
\

\f2\i \cf4 /**\
 * Whether to enable the Hermes VM.\
 *\
 * This should be set on project.ext.react and mirrored here.  If it is not set\
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode\
 * and the benefits of using Hermes will therefore be sharply reduced.\
 */\

\f1\i0 \cf5 def \cf0 enableHermes \cf2 = project.ext.react.get(\cf3 "enableHermes"\cf2 , \cf5 false\cf2 );\
\

\f2\i \cf4 /**\
 * Architectures to build native code for in debug.\
 */\

\f1\i0 \cf5 def \cf0 nativeArchitectures \cf2 = project.getProperties().get(\cf3 "reactNativeDebugArchitectures"\cf2 )\
\
android 
\f3\b \{\
    
\f1\b0 ndkVersion rootProject.ext.ndkVersion\
\
    compileSdkVersion rootProject.ext.compileSdkVersion\
\
    defaultConfig 
\f3\b \{\
        
\f1\b0 applicationId \cf3 "com.prefusionhealth"\
        \cf2 minSdkVersion rootProject.ext.minSdkVersion\
        targetSdkVersion rootProject.ext.targetSdkVersion\
        versionCode \cf6 1\
        \cf2 versionName \cf3 "1.0"\
        
\f2\i \cf4 // New version\
    \
        
\f1\i0 \cf2 missingDimensionStrategy \cf3 'react-native-camera'\cf2 , \cf3 'general' 
\f2\i \cf4 // <--- insert this line\
  \
    
\f3\i0\b \cf2 \}\
    
\f1\b0 splits 
\f3\b \{\
        
\f1\b0 abi 
\f3\b \{\
            
\f1\b0 reset()\
            enable \cf0 enableSeparateBuildPerCPUArchitecture\
            \cf2 universalApk \cf5 false  
\f2\i \cf4 // If true, also generate a universal APK\
            
\f1\i0 \cf2 include \cf3 "armeabi-v7a"\cf2 , \cf3 "x86"\cf2 , \cf3 "arm64-v8a"\cf2 , \cf3 "x86_64"\
        
\f3\b \cf2 \}\
    \}\
    
\f1\b0 signingConfigs 
\f3\b \{\
        
\f1\b0 debug 
\f3\b \{\
            
\f1\b0 storeFile file(\cf3 'debug.keystore'\cf2 )\
            storePassword \cf3 'android'\
            \cf2 keyAlias \cf3 'androiddebugkey'\
            \cf2 keyPassword \cf3 'android'\
        
\f3\b \cf2 \}\
    \}\
    
\f1\b0 buildTypes 
\f3\b \{\
        
\f1\b0 debug 
\f3\b \{\
            
\f1\b0 signingConfig signingConfigs.debug\
            \cf5 if \cf2 (\cf0 nativeArchitectures\cf2 ) \{\
                ndk 
\f3\b \{\
                    
\f1\b0 abiFilters \cf0 nativeArchitectures\cf2 .split(\cf3 ','\cf2 )\
                
\f3\b \}\
            
\f1\b0 \}\
        
\f3\b \}\
        
\f1\b0 release 
\f3\b \{\
            
\f2\i\b0 \cf4 // Caution! In production, you need to generate your own keystore file.\
            // see https://reactnative.dev/docs/signed-apk-android.\
            
\f1\i0 \cf2 signingConfig signingConfigs.debug\
            minifyEnabled \cf0 enableProguardInReleaseBuilds\
       \
            \cf2 proguardFiles getDefaultProguardFile(\cf3 "proguard-android.txt"\cf2 ), \cf3 "proguard-rules.pro"\
        
\f3\b \cf2 \}\
    \}\
\
    
\f2\i\b0 \cf4 // applicationVariants are e.g. debug, release\
    
\f1\i0 \cf2 applicationVariants.all 
\f3\b \{ 
\f1\b0 variant 
\f3\b ->\
        
\f1\b0 variant.outputs.each 
\f3\b \{ 
\f1\b0 output 
\f3\b ->\
            
\f2\i\b0 \cf4 // For each separate APK per architecture, set a unique version code as described here:\
            // https://developer.android.com/studio/build/configure-apk-splits.html\
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.\
            
\f1\i0 \cf5 def \cf0 versionCodes \cf2 = [\cf3 "armeabi-v7a"\cf2 : \cf6 1\cf2 , \cf3 "x86"\cf2 : \cf6 2\cf2 , \cf3 "arm64-v8a"\cf2 : \cf6 3\cf2 , \cf3 "x86_64"\cf2 : \cf6 4\cf2 ]\
            \cf5 def \cf0 abi \cf2 = output.getFilter(\cf0 OutputFile\cf2 .
\f2\i \cf7 ABI
\f1\i0 \cf2 )\
            \cf5 if \cf2 (\cf0 abi \cf2 != \cf5 null\cf2 ) \{  
\f2\i \cf4 // null for the universal-debug, universal-release variants\
                
\f1\i0 \cf2 output.versionCodeOverride =\
                        defaultConfig.versionCode * \cf6 1000 \cf2 + \cf0 versionCodes\cf2 .get(\cf0 abi\cf2 )\
            \}\
\
        
\f3\b \}\
    \}\
    
\f1\b0 compileOptions 
\f3\b \{\
        
\f1\b0 sourceCompatibility \cf0 JavaVersion\cf2 .
\f2\i \cf7 VERSION_1_8\
        
\f1\i0 \cf2 targetCompatibility \cf0 JavaVersion\cf2 .
\f2\i \cf7 VERSION_1_8\
    
\f3\i0\b \cf2 \}\
\
    
\f2\i\b0 \cf4 // kotlinOptions \{\
    //     jvmTarget = "1.8"\
    // \}\
    
\f1\i0 \cf2 dexOptions 
\f3\b \{\
   
\f1\b0 incremental \cf5 true\
   \cf2 javaMaxHeapSize \cf3 "4g"\

\f3\b \cf2 \}\
  
\f1\b0 packagingOptions 
\f3\b \{\
        
\f1\b0 exclude(\cf3 "META-INF/DEPENDENCIES"\cf2 )\
        exclude(\cf3 "META-INF/LICENSE"\cf2 )\
        exclude(\cf3 "META-INF/LICENSE.txt"\cf2 )\
        exclude(\cf3 "META-INF/license.txt"\cf2 )\
        exclude(\cf3 "META-INF/NOTICE"\cf2 )\
        exclude(\cf3 "META-INF/NOTICE.txt"\cf2 )\
        exclude(\cf3 "META-INF/notice.txt"\cf2 )\
        exclude(\cf3 "META-INF/ASL2.0"\cf2 )\
        exclude(\cf3 "META-INF/*.kotlin_module"\cf2 ) \
      
\f3\b \}   \
\}\
\

\f1\b0 dependencies 
\f3\b \{\
    
\f1\b0 implementation fileTree(\cf3 dir\cf2 : \cf3 "libs"\cf2 , \cf3 include\cf2 : [\cf3 "*.jar"\cf2 ])\
    
\f2\i \cf4 //noinspection GradleDynamicVersion\
    
\f1\i0 \cf2 implementation \cf3 "com.facebook.react:react-native:+"  
\f2\i \cf4 // From node_modules\
    //firebase @d9n6\
 
\f1\i0 \cf2 implementation \cf3 'com.google.firebase:firebase-analytics:18.0.2'\
 \cf2 implementation \cf3 'com.google.firebase:firebase-crashlytics-gradle:2.1.1'  \
  
\f2\i \cf4 // implementation "androidx.multidex:multidex:2.0.1" //yestarday\
    
\f1\i0 \cf2 implementation \cf3 "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"\
\
    \cf2 debugImplementation(\cf3 "com.facebook.flipper:flipper:\cf2 $
\f3\b \{
\f1\b0 FLIPPER_VERSION
\f3\b \}
\f1\b0 \cf3 "\cf2 ) 
\f3\b \{\
        
\f1\b0 exclude \cf3 group\cf2 :\cf3 'com.facebook.fbjni'\
    
\f3\b \cf2 \}\
\
    
\f1\b0 debugImplementation(\cf3 "com.facebook.flipper:flipper-network-plugin:\cf2 $
\f3\b \{
\f1\b0 FLIPPER_VERSION
\f3\b \}
\f1\b0 \cf3 "\cf2 ) 
\f3\b \{\
        
\f1\b0 exclude \cf3 group\cf2 :\cf3 'com.facebook.flipper'\
        \cf2 exclude \cf3 group\cf2 :\cf3 'com.squareup.okhttp3'\cf2 , \cf3 module\cf2 :\cf3 'okhttp'\
    
\f3\b \cf2 \}\
\
    
\f1\b0 debugImplementation(\cf3 "com.facebook.flipper:flipper-fresco-plugin:\cf2 $
\f3\b \{
\f1\b0 FLIPPER_VERSION
\f3\b \}
\f1\b0 \cf3 "\cf2 ) 
\f3\b \{\
        
\f1\b0 exclude \cf3 group\cf2 :\cf3 'com.facebook.flipper'\
    
\f3\b \cf2 \}\
\
    
\f1\b0 \cf5 if \cf2 (\cf0 enableHermes\cf2 ) \{\
        \cf5 def \cf0 hermesPath \cf2 = \cf3 "../../node_modules/hermes-engine/android/"\cf2 ;\
        debugImplementation files(\cf0 hermesPath \cf2 + \cf3 "hermes-debug.aar"\cf2 )\
        releaseImplementation files(\cf0 hermesPath \cf2 + \cf3 "hermes-release.aar"\cf2 )\
    \} \cf5 else \cf2 \{\
        implementation \cf0 jscFlavor\
    \cf2 \}\

\f3\b \}\
\

\f2\i\b0 \cf4 // Run this once to be able to run the application with BUCK\
// puts all compile dependencies into folder libs for BUCK to use\

\f1\i0 \cf2 task copyDownloadableDepsToLibs(\cf3 type\cf2 : \cf0 Copy\cf2 ) 
\f3\b \{\
    
\f1\b0 from configurations.\cf3 implementation\
    \cf2 into \cf3 'libs'\

\f3\b \cf2 \}\
\

\f1\b0 apply \cf3 from\cf2 : file(\cf3 "../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"\cf2 ); applyNativeModulesAppBuildGradle(project)\
apply \cf3 plugin\cf2 : \cf3 'com.google.gms.google-services' 
\f2\i \cf4 //firebase @d9n6\
\
\
\
\
\
\
//build inside android folder\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 // Top-level build file where you can add configuration options common to all sub-projects/modules.\
\

\f1\i0 \cf2 buildscript 
\f3\b \{\
    
\f1\b0 ext 
\f3\b \{\
        
\f2\i\b0 \cf4 // // firebase S @d9n6\
        // googlePlayServicesVersion =  "+"\
        //  firebaseMessagingVersion="21.1.0"\
        //    // firebase F @d9n6\
        // buildToolsVersion = "30.0.2"\
        // minSdkVersion = 21\
        // compileSdkVersion = 33\
        // targetSdkVersion = 33\
        // ndkVersion = "21.4.7075529"\
        //  ext.kotlin_version = '1.6.0'\
\
             // firebase S @d9n6\
        
\f1\i0 \cf2 googlePlayServicesVersion =  \cf3 "+"\
         \cf2 firebaseMessagingVersion=\cf3 "21.1.0"\
           
\f2\i \cf4 // firebase F @d9n6\
        
\f1\i0 \cf2 buildToolsVersion = \cf3 "30.0.2"\
        \cf2 minSdkVersion = \cf6 21\
        \cf2 compileSdkVersion = \cf6 33\
        \cf2 targetSdkVersion = \cf6 33\
        \cf2 ndkVersion = \cf3 "21.4.7075529"\
        \cf2 supportLibVersion = \cf3 "28.0.0"\
          \cf2 androidXAnnotation = \cf3 "1.1.0"\
           \cf2 androidXBrowser = \cf3 "1.0.0"\
       \cf2 kotlinVersion = \cf3 "1.5.0"\
    
\f3\b \cf2 \}\
    
\f1\b0 repositories 
\f3\b \{\
        
\f1\b0 google()\
        mavenCentral()\
        jcenter()\
    
\f3\b \}\
    
\f1\b0 dependencies 
\f3\b \{\
        
\f2\i\b0 \cf4 //classpath("com.android.tools.build:gradle:4.2.2")\
        
\f1\i0 \cf2 classpath \cf3 'com.android.tools.build:gradle:4.2.2'\
      
\f2\i \cf4 //firebase @d9n6  // Add me --- /\\ for firebase chat and  //add for remote push notifications android\
         
\f1\i0 \cf2 classpath \cf3 'com.google.gms:google-services:4.3.10'\
         \cf2 classpath \cf3 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'\
         \cf2 classpath \cf3 "org.jetbrains.kotlin:kotlin-gradle-plugin:\cf2 $kotlinVersion\cf3 "\
        
\f2\i \cf4 // NOTE: Do not place your application dependencies here; they belong\
        // in the individual module build.gradle files\
    
\f3\i0\b \cf2 \}\
\}\
\

\f1\b0 allprojects 
\f3\b \{\
    
\f1\b0 repositories 
\f3\b \{\
        
\f1\b0 mavenCentral()\
        mavenLocal()\
        maven 
\f3\b \{\
            
\f2\i\b0 \cf4 // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\
            
\f1\i0 \cf2 url(\cf3 "\cf2 $rootDir\cf3 /../node_modules/react-native/android"\cf2 )\
        
\f3\b \}\
        
\f1\b0 maven 
\f3\b \{\
            
\f2\i\b0 \cf4 // Android JSC is installed from npm\
            
\f1\i0 \cf2 url(\cf3 "\cf2 $rootDir\cf3 /../node_modules/jsc-android/dist"\cf2 )\
        
\f3\b \}\
\
        
\f1\b0 google()\
        jcenter()\
        maven 
\f3\b \{ 
\f1\b0 url \cf3 'https://www.jitpack.io' 
\f3\b \cf2 \}\
         
\f1\b0 exclusiveContent 
\f3\b \{\
       
\f2\i\b0 \cf4 // We get React Native's Android binaries exclusively through npm,\
       // from a local Maven repo inside node_modules/react-native/.\
       // (The use of exclusiveContent prevents looking elsewhere like Maven Central\
       // and potentially getting a wrong version.)\
       
\f1\i0 \cf2 filter 
\f3\b \{\
           
\f1\b0 includeGroup \cf3 "com.facebook.react"\
       
\f3\b \cf2 \}\
       
\f1\b0 forRepository 
\f3\b \{\
           
\f1\b0 maven 
\f3\b \{\
               
\f1\b0 url \cf3 "\cf2 $rootDir\cf3 /../node_modules/react-native/android"\
           
\f3\b \cf2 \}\
       \}\
    \}\
    \}\
\}\

\f2\i\b0 \cf4 // for removing react-native-geocode release build error\

\f1\i0 \cf2 subprojects 
\f3\b \{\
    
\f1\b0 afterEvaluate 
\f3\b \{
\f1\b0 project 
\f3\b ->\
        
\f1\b0 \cf5 if \cf2 (project.hasProperty(\cf3 "android"\cf2 )) \{\
            android 
\f3\b \{\
                
\f1\b0 compileSdkVersion rootProject.ext.compileSdkVersion\
                buildToolsVersion rootProject.ext.buildToolsVersion\
            
\f3\b \}\
        
\f1\b0 \}\
    
\f3\b \}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\i\b0 \cf4 \
}